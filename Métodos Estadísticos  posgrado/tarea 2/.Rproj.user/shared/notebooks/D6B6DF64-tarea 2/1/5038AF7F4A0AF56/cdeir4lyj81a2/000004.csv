"0","for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)"
"0","  "
"0","  names(parent_lookup)[1] <-paste0(""parent"",i)"
"0","  names(parent_lookup)[2] <-paste0(""parent_prob"",i)"
"0","  "
"0","  for (j in 1:i) {"
"0","    "
"0","    if (j == 1)  prob_data[[paste0(""parent"",i)]] <- sub(""/[^/]+$"", """", prob_data$pathString)"
"0","    else if (j  > 1) prob_data[[paste0(""parent"",i)]] <- sub(""/[^/]+$"", """", prob_data[[paste0(""parent"",i)]])"
"0","  }"
"0","  "
"0","  prob_data <- prob_data %>% left_join(parent_lookup, by = paste0(""parent"",i))"
"0","  "
"0","}"
"0","prob_data$overall_prob <- apply(prob_data %>% select(contains(""prob""))  , 1, prod, na.rm = T)  # calculate cumulative probability   "
"0","terminal_data <- prob_data %>%  filter(tree_level == max_tree_level) %>% # create new rows that will display terminal/final step calulcations on the tree"
"0","  mutate(node_type = 'terminal',"
"0","         pathString = paste0(pathString, ""/overall""),"
"0","         prob = NA,"
"0","         tree_level = max_tree_level + 1)"
"0","start_node <- ""Condiciones de cultivo"" # name the root node"
"0","prob_data = bind_rows(prob_data, terminal_data) %>%  # bind everything together "
"0","  mutate(pathString = paste0(start_node,""/"",pathString),"
"0","         overall_prob = ifelse(node_type == 'terminal', overall_prob, NA),"
"0","         prob_rank = rank(-overall_prob, ties.method = ""min"", na.last = ""keep""))"
"0","prob_data = bind_rows(prob_data, data.frame(pathString = start_node, node_type = 'start', tree_level = 0)) %>% # add one new row to serve as the start node label"
"0","  select(-contains(""parent""))"
"0","make_my_tree <- function(mydf, display_level = NULL, show_rank = FALSE, direction = ""LR"") {"
"0","  "
"0","  if (!is.null(display_level) ) {"
"0","    mydf <- mydf %>% filter(tree_level <= display_level)"
"0","    "
"0","  }"
"0","  "
"0","  mytree <- as.Node(mydf) "
"0","  "
"0","  GetEdgeLabel <- function(node) switch(node$node_type, node$prob)"
"0","  "
"0","  GetNodeShape <- function(node) switch(node$node_type, start = ""box"", node_decision = ""circle"", terminal = ""none"")"
"0","  "
"0","  "
"0","  GetNodeLabel <- function(node) switch(node$node_type, "
"0","                                        terminal = ifelse(show_rank  == TRUE, paste0(""Prob: "", node$overall_prob,""\nRank: "", node$prob_rank),"
"0","                                                          paste0(""Prob: "", node$overall_prob)),"
"0","                                        node$node_name)"
"0","  "
"0","  SetEdgeStyle(mytree, fontname = 'helvetica', label = GetEdgeLabel)"
"0","  "
"0","  SetNodeStyle(mytree, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape)"
"0","  "
"0","  SetGraphStyle(mytree, rankdir = direction) "
"0","  "
"0","  plot(mytree)"
"0","  "
"0","}"
"0","make_my_tree(prob_data)"
