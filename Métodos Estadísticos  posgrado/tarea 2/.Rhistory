'Compost/Be/A',
'Compost/Be/B',
'Compost/Az/A',
'Compost/Az/B',
'Cascaras/Me/A',
'Cascaras/Me/B',
'Cascaras/Be/A',
'Cascaras/Be/B',
'Cascaras/Az/A',
'Cascaras/Az/B',
'Guano/Me/A',
'Guano/Me/B',
'Guano/Be/A',
'Guano/Be/B',
'Guano/Az/A',
'Guano/Az/B'
),
prob = c(0.2,
0.3,
0.3,
0.2,
0.4,
0.4,
0.2,
0.5,
0.2,
0.3,
0.4,
0.3,
0.3,
0.4,
0.6,
0,
0.3,
0.7,
0.3,
0.7,
0.3,
0.7,
0.4,
0.6,
0.4,
0.6,
0.4,
0.6,
0.5,
0.5,
0.5,
0.5,
0.5,
0.5,
0.6,
0.4,
0.6,
0.4,
0.6,
0.4
))
# knitr::kable(prob_data)
library(data.tree)
library(dplyr)
library(stringr)
library(DiagrammeR)
prob_data <- prob_data %>% mutate(
tree_level = str_count(string = pathString,
pattern = '/')+1,
tree_group = str_replace(string = pathString,
pattern = '/.*',
replacement = ''),
node_type = 'decision_node')
max_tree_level <- max(prob_data$tree_level, na.rm = T)
parent_lookup <- prob_data %>% distinct(pathString, prob)
for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)
names(parent_lookup)[1] <-paste0("parent",i)
names(parent_lookup)[2] <-paste0("parent_prob",i)
for (j in 1:i) {
if (j == 1)  prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data$pathString)
else if (j  > 1) prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data[[paste0("parent",i)]])
}
prob_data <- prob_data %>% left_join(parent_lookup, by = paste0("parent",i))
}
prob_data$overall_prob <- apply(prob_data %>% select(contains("prob"))  , 1, prod, na.rm = T)  # calculate cumulative probability
terminal_data <- prob_data %>%  filter(tree_level == max_tree_level) %>% # create new rows that will display terminal/final step calulcations on the tree
mutate(node_type = 'terminal',
pathString = paste0(pathString, "/overall"),
prob = NA,
tree_level = max_tree_level + 1)
start_node <- "Condiciones de cultivo" # name the root node
prob_data = bind_rows(prob_data, terminal_data) %>%  # bind everything together
mutate(pathString = paste0(start_node,"/",pathString),
overall_prob = ifelse(node_type == 'terminal', overall_prob, NA),
prob_rank = rank(-overall_prob, ties.method = "min", na.last = "keep"))
prob_data = bind_rows(prob_data, data.frame(pathString = start_node, node_type = 'start', tree_level = 0)) %>% # add one new row to serve as the start node label
select(-contains("parent"))
make_my_tree <- function(mydf, display_level = NULL, show_rank = FALSE, direction = "LR") {
if (!is.null(display_level) ) {
mydf <- mydf %>% filter(tree_level <= display_level)
}
mytree <- as.Node(mydf)
GetEdgeLabel <- function(node) switch(node$node_type, node$prob)
GetNodeShape <- function(node) switch(node$node_type, start = "box", node_decision = "circle", terminal = "none")
GetNodeLabel <- function(node) switch(node$node_type,
terminal = ifelse(show_rank  == TRUE, paste0("Prob: ", node$overall_prob,"\nRank: ", node$prob_rank),
paste0("Prob: ", node$overall_prob)),
node$node_name)
SetEdgeStyle(mytree, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(mytree, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape)
SetGraphStyle(mytree, rankdir = direction)
plot(mytree)
}
make_my_tree(prob_data)
make_my_tree(prob_data)
for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)
names(parent_lookup)[1] <-paste0("parent",i)
names(parent_lookup)[2] <-paste0("parent_prob",i)
for (j in 1:i) {
if (j == 1)  prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data$pathString)
else if (j  > 1) prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data[[paste0("parent",i)]])
}
prob_data <- prob_data %>% left_join(parent_lookup, by = paste0("parent",i))
}
prob_data <- data.frame(pathString = c(
'Gallinaza',
'Compost',
'Cascaras',
'Guano',
'Gallinaza/Me',
'Gallinaza/Be',
'Gallinaza/Az',
'Compost/Me',
'Compost/Be',
'Compost/Az',
'Cascaras/Me',
'Cascaras/Be',
'Cascaras/Az',
'Guano/Me',
'Guano/Be',
'Guano/Az',
'Gallinaza/Me/A',
'Gallinaza/Me/B',
'Gallinaza/Be/A',
'Gallinaza/Be/B',
'Gallinaza/Az/A',
'Gallinaza/Az/B',
'Compost/Me/A',
'Compost/Me/B',
'Compost/Be/A',
'Compost/Be/B',
'Compost/Az/A',
'Compost/Az/B',
'Cascaras/Me/A',
'Cascaras/Me/B',
'Cascaras/Be/A',
'Cascaras/Be/B',
'Cascaras/Az/A',
'Cascaras/Az/B',
'Guano/Me/A',
'Guano/Me/B',
'Guano/Be/A',
'Guano/Be/B',
'Guano/Az/A',
'Guano/Az/B'
),
prob = c(0.2,
0.3,
0.3,
0.2,
0.4,
0.4,
0.2,
0.5,
0.2,
0.3,
0.4,
0.3,
0.3,
0.4,
0.6,
0,
0.3,
0.7,
0.3,
0.7,
0.3,
0.7,
0.4,
0.6,
0.4,
0.6,
0.4,
0.6,
0.5,
0.5,
0.5,
0.5,
0.5,
0.5,
0.6,
0.4,
0.6,
0.4,
0.6,
0.4
))
# knitr::kable(prob_data)
library(data.tree)
library(dplyr)
library(stringr)
library(DiagrammeR)
prob_data <- prob_data %>% mutate(
tree_level = str_count(string = pathString,
pattern = '/')+1,
tree_group = str_replace(string = pathString,
pattern = '/.*',
replacement = ''),
node_type = 'decision_node')
max_tree_level <- max(prob_data$tree_level, na.rm = T)
parent_lookup <- prob_data %>% distinct(pathString, prob)
for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)
names(parent_lookup)[1] <-paste0("parent",i)
names(parent_lookup)[2] <-paste0("parent_prob",i)
for (j in 1:i) {
if (j == 1)  prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data$pathString)
else if (j  > 1) prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data[[paste0("parent",i)]])
}
prob_data <- prob_data %>% left_join(parent_lookup, by = paste0("parent",i))
}
prob_data$overall_prob <- apply(prob_data %>% select(contains("prob"))  , 1, prod, na.rm = T)  # calculate cumulative probability
terminal_data <- prob_data %>%  filter(tree_level == max_tree_level) %>% # create new rows that will display terminal/final step calulcations on the tree
mutate(node_type = 'terminal',
pathString = paste0(pathString, "/overall"),
prob = NA,
tree_level = max_tree_level + 1)
start_node <- "Condiciones de cultivo" # name the root node
prob_data = bind_rows(prob_data, terminal_data) %>%  # bind everything together
mutate(pathString = paste0(start_node,"/",pathString),
overall_prob = ifelse(node_type == 'terminal', overall_prob, NA),
prob_rank = rank(-overall_prob, ties.method = "min", na.last = "keep"))
prob_data = bind_rows(prob_data, data.frame(pathString = start_node, node_type = 'start', tree_level = 0)) %>% # add one new row to serve as the start node label
select(-contains("parent"))
make_my_tree <- function(mydf, display_level = NULL, show_rank = FALSE, direction = "LR") {
if (!is.null(display_level) ) {
mydf <- mydf %>% filter(tree_level <= display_level)
}
mytree <- as.Node(mydf)
GetEdgeLabel <- function(node) switch(node$node_type, node$prob)
GetNodeShape <- function(node) switch(node$node_type, start = "box", node_decision = "circle", terminal = "none")
GetNodeLabel <- function(node) switch(node$node_type,
terminal = ifelse(show_rank  == TRUE, paste0("Prob: ", node$overall_prob,"\nRank: ", node$prob_rank),
paste0("Prob: ", node$overall_prob)),
node$node_name)
SetEdgeStyle(mytree, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(mytree, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape)
SetGraphStyle(mytree, rankdir = direction)
plot(mytree)
}
make_my_tree(prob_data)
make_my_tree(prob_data)
for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)
names(parent_lookup)[1] <-paste0("parent",i)
names(parent_lookup)[2] <-paste0("parent_prob",i)
for (j in 1:i) {
if (j == 1)  prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data$pathString)
else if (j  > 1) prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data[[paste0("parent",i)]])
}
prob_data <- prob_data %>% left_join(parent_lookup, by = paste0("parent",i))
}
prob_data$overall_prob <- apply(prob_data %>% select(contains("prob"))  , 1, prod, na.rm = T)  # calculate cumulative probability
terminal_data <- prob_data %>%  filter(tree_level == max_tree_level) %>% # create new rows that will display terminal/final step calulcations on the tree
mutate(node_type = 'terminal',
pathString = paste0(pathString, "/overall"),
prob = NA,
tree_level = max_tree_level + 1)
start_node <- "Condiciones de cultivo" # name the root node
prob_data = bind_rows(prob_data, terminal_data) %>%  # bind everything together
mutate(pathString = paste0(start_node,"/",pathString),
overall_prob = ifelse(node_type == 'terminal', overall_prob, NA),
prob_rank = rank(-overall_prob, ties.method = "min", na.last = "keep"))
prob_data = bind_rows(prob_data, data.frame(pathString = start_node, node_type = 'start', tree_level = 0)) %>% # add one new row to serve as the start node label
select(-contains("parent"))
make_my_tree <- function(mydf, display_level = NULL, show_rank = FALSE, direction = "LR") {
if (!is.null(display_level) ) {
mydf <- mydf %>% filter(tree_level <= display_level)
}
mytree <- as.Node(mydf)
GetEdgeLabel <- function(node) switch(node$node_type, node$prob)
GetNodeShape <- function(node) switch(node$node_type, start = "box", node_decision = "circle", terminal = "none")
GetNodeLabel <- function(node) switch(node$node_type,
terminal = ifelse(show_rank  == TRUE, paste0("Prob: ", node$overall_prob,"\nRank: ", node$prob_rank),
paste0("Prob: ", node$overall_prob)),
node$node_name)
SetEdgeStyle(mytree, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(mytree, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape)
SetGraphStyle(mytree, rankdir = direction)
plot(mytree)
}
jpeg(filename = "arbol1.jpg")
make_my_tree(prob_data)
dev.off()
make_my_tree(prob_data)
make_my_tree(prob_data)
win.graph()
make_my_tree(prob_data)
make_my_tree(prob_data)
dev.off()
win.graph()
make_my_tree(prob_data)
prob_data <- data.frame(pathString = c(
'Gallinaza',
'Compost',
'Cascaras',
'Guano',
'Gallinaza/Me',
'Gallinaza/Be',
'Gallinaza/Az',
'Compost/Me',
'Compost/Be',
'Compost/Az',
'Cascaras/Me',
'Cascaras/Be',
'Cascaras/Az',
'Guano/Me',
'Guano/Be',
'Guano/Az',
'Gallinaza/Me/A',
'Gallinaza/Me/B',
'Gallinaza/Be/A',
'Gallinaza/Be/B',
'Gallinaza/Az/A',
'Gallinaza/Az/B',
'Compost/Me/A',
'Compost/Me/B',
'Compost/Be/A',
'Compost/Be/B',
'Compost/Az/A',
'Compost/Az/B',
'Cascaras/Me/A',
'Cascaras/Me/B',
'Cascaras/Be/A',
'Cascaras/Be/B',
'Cascaras/Az/A',
'Cascaras/Az/B',
'Guano/Me/A',
'Guano/Me/B',
'Guano/Be/A',
'Guano/Be/B',
'Guano/Az/A',
'Guano/Az/B'
),
prob = c(0.2,
0.3,
0.3,
0.2,
0.4,
0.4,
0.2,
0.5,
0.2,
0.3,
0.4,
0.3,
0.3,
0.4,
0.6,
0,
0.3,
0.7,
0.3,
0.7,
0.3,
0.7,
0.4,
0.6,
0.4,
0.6,
0.4,
0.6,
0.5,
0.5,
0.5,
0.5,
0.5,
0.5,
0.6,
0.4,
0.6,
0.4,
0.6,
0.4
))
# knitr::kable(prob_data)
library(data.tree)
library(dplyr)
library(stringr)
library(DiagrammeR)
prob_data <- prob_data %>% mutate(
tree_level = str_count(string = pathString,
pattern = '/')+1,
tree_group = str_replace(string = pathString,
pattern = '/.*',
replacement = ''),
node_type = 'decision_node')
max_tree_level <- max(prob_data$tree_level, na.rm = T)
parent_lookup <- prob_data %>% distinct(pathString, prob)
prob_data
for (i in 1:(max_tree_level -  1)) { # loop through all tree layers to get all immidiate parent probabilities (to calculate cumulative prob)
names(parent_lookup)[1] <-paste0("parent",i)
names(parent_lookup)[2] <-paste0("parent_prob",i)
for (j in 1:i) {
if (j == 1)  prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data$pathString)
else if (j  > 1) prob_data[[paste0("parent",i)]] <- sub("/[^/]+$", "", prob_data[[paste0("parent",i)]])
}
prob_data <- prob_data %>% left_join(parent_lookup, by = paste0("parent",i))
}
prob_data$overall_prob <- apply(prob_data %>% select(contains("prob"))  , 1, prod, na.rm = T)  # calculate cumulative probability
terminal_data <- prob_data %>%  filter(tree_level == max_tree_level) %>% # create new rows that will display terminal/final step calulcations on the tree
mutate(node_type = 'terminal',
pathString = paste0(pathString, "/overall"),
prob = NA,
tree_level = max_tree_level + 1)
start_node <- "Condiciones de cultivo" # name the root node
prob_data = bind_rows(prob_data, terminal_data) %>%  # bind everything together
mutate(pathString = paste0(start_node,"/",pathString),
overall_prob = ifelse(node_type == 'terminal', overall_prob, NA),
prob_rank = rank(-overall_prob, ties.method = "min", na.last = "keep"))
prob_data = bind_rows(prob_data, data.frame(pathString = start_node, node_type = 'start', tree_level = 0)) %>% # add one new row to serve as the start node label
select(-contains("parent"))
make_my_tree <- function(mydf, display_level = NULL, show_rank = FALSE, direction = "LR") {
if (!is.null(display_level) ) {
mydf <- mydf %>% filter(tree_level <= display_level)
}
mytree <- as.Node(mydf)
GetEdgeLabel <- function(node) switch(node$node_type, node$prob)
GetNodeShape <- function(node) switch(node$node_type, start = "box", node_decision = "circle", terminal = "none")
GetNodeLabel <- function(node) switch(node$node_type,
terminal = ifelse(show_rank  == TRUE, paste0("Prob: ", node$overall_prob,"\nRank: ", node$prob_rank),
paste0("Prob: ", node$overall_prob)),
node$node_name)
SetEdgeStyle(mytree, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(mytree, fontname = 'helvetica', label = GetNodeLabel, shape = GetNodeShape)
SetGraphStyle(mytree, rankdir = direction)
plot(mytree)
}
make_my_tree(prob_data)
make_my_tree(prob_data)
grepl('(?=.*/A/overall)',prob_data$pathString,perl =T)
sum(prob_data$pathString[grepl('(?=.*/A/overall)',prob_data$pathString,perl =T)])
sum(prob_data$prob[grepl('(?=.*/A/overall)',prob_data$pathString,perl =T)])
prob_data$prob[grepl('(?=.*/A/overall)',prob_data$pathString,perl =T)]
which(grepl('(?=.*/A/overall)',prob_data$pathString,perl =T))
sum(prob_data$prob[which(grepl('(?=.*/A/overall)',prob_data$pathString,perl =T))])
c(which(grepl('(?=.*/A/overall)',prob_data$pathString,perl =T)))
prob_data$prob
sum(prob_data$overall_prob[c(which(grepl('(?=.*/A/overall)',prob_data$pathString,perl =T)))])
which(grepl('(?=.*/A/overall)',prob_data$pathString,perl =T))
which(grepl('(?=.*/Me/A)',prob_data$pathString,perl =T))
which(grepl('(?=.*/Me/A)',prob_data$pathString,perl =T))
sum(prob_data$prob[which(grepl('(?=.*/Me/A)',prob_data$pathString,perl =T))])
prob_data$prob[which(grepl('(?=.*/Me/A)',prob_data$pathString,perl =T))]
sum(prob_data$prob[which(grepl('(?=.*/Me/A)',prob_data$pathString,perl =T))[1:4]])
sum(prob_data$overall_prob[c(which(grepl('(?=.*/Me/A/overall)',prob_data$pathString,perl =T)))])
0.192/0.45
which(grepl('(?=.*/Me/A/overall)',prob_data$pathString,perl =T))
which(grepl('(?=.*/Be/A/overall)(?=.*/Be/B/overall)',prob_data$pathString,perl =T))
which(grepl('(?=.*/Be/A/overall|/Be/B/overall)',prob_data$pathString,perl =T))
sum(prob_data$overall_prob[c(which(grepl('(?=.*/Be/A/overall|/Be/B/overall)',prob_data$pathString,perl =T)))])
sum(prob_data$overall_prob[c(which(grepl('(?=.*/Be/A/overall|/Be/B/overall)',prob_data$pathString,perl =T)))])
which(grepl('(?=.*/Gu/Be/B/overall)',prob_data$pathString,perl =T))
sum(prob_data$overall_prob[c(which(grepl('(?=.*/Guano/Be/B/overall)',prob_data$pathString,perl =T)))])
0.048/0.35
PA<-0.75
PB<-0.82
PC<-0.87
PD<-0.9
PA*PB*PC*PD
PA1+PA2+PA3+PA4-(PA1*PA2)-(PA1*PA3)-(PA1*PA4)-(PA2*PA3)-(PA2*PA4)-(PA3*PA4)+(PA1*PA2*PA3)+(PA1*PA2*PA4)+(PA2*PA3*PA4)+(PA1*PA3*PA4)-(PA1*PA2*PA3*PA4)-(PA1*PA2*PA3*PA4)
PA+PB+PC+PD-(PA*PB)-(PA*PC)-(PA*PD)-(PB*PC)-(PB*PD)-(PC*PD)+(PA*PB*PC)+(PA*PB*PD)+(PB*PC*PD)+(PA*PC*PD)-(PA*PB*PC*PD)-(PA*PB*PC*PD)
1-(PA1+PA2+PA3+PA4-(PA1*PA2)-(PA1*PA3)-(PA1*PA4)-(PA2*PA3)-(PA2*PA4)-(PA3*PA4)+(PA1*PA2*PA3)+(PA1*PA2*PA4)+(PA2*PA3*PA4)+(PA1*PA3*PA4)-(PA1*PA2*PA3*PA4))
1-(PA+PB+PC+PD-(PA*PB)-(PA*PC)-(PA*PD)-(PB*PC)-(PB*PD)-(PC*PD)+(PA*PB*PC)+(PA*PB*PD)+(PB*PC*PD)+(PA*PC*PD)-(PA*PB*PC*PD))
PA3+PA4-(PA3*PA4)
PC+PD-(PC*PD)
1-(PC+PD-(PC*PD))
(1-PB1)*(1-PB2)*(1-PB3)
PB1<-0.4
PB2<-0.4
PB3<-0.4
(1-PB1)*(1-PB2)*(1-PB3)
PB1*PB2*PB3
PB1+PB2+PB3-(PB1*PB2)-(PB1*PB3)-(PB2*PB3)+(PB1*PB2*PB3)
0.7*0.5
0.35/0.4
0.5+0.4-0.35
choose(20,2)
(5/20)*(4/19)
choose(5,2)/190
choose(15,2)/190
27/70
0/70
4/70
27/31
4/31
(39/70)+(43/70)-(39/70)
choose(4,2)* choose(4,2)
choose(4,3)*choose(3,1)
choose(4,1)*choose(4,1)*choose(3,2)
12/16*100
9/16*100
3/16
3/16
6/9
4/9
0.7*0.7
